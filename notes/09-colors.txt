05.12.2016

Colors

Scanline Conversion
    Filling in polygons by drawing a set of lines (horizontal or vertical)
                          (x0,y0)  (x1,y1)
           T ________________ B
            /            ___/
	   /         ___/
	  /      ___/
	 /   ___/
      M	/___/  

    1. Order points vertically
    2. Start BB
    3. (x0, y0) will always be on BM or MT
       (x1, y1) will always be on BT

    (xb,yb) --> (xb,yb)
    (xb + delta 0, yb + 1) --> (xb + delta 1, yb + 1)

    delta 1 = ?

    m(x-xb) = y-yb
    x-xb = y-yb(xt-xb / yt-yb)
    x = xb + (xt-xb / yt-yb)

    delta 0 = xm - xb / ym - yb


05.13.2016

Tweening

Scanline Electric Boogaloo
       T ___
	 \  \___
	  \     \___
	   \        \_____ M
	    \           _/
	     \        _/
	      \     _/
     delta 0   \  _/   delta 1
	        \/
                B
		
    (t is top, m is middle, b is bottom)
 
    Categories of triangles

        1. There is a true middle
           yb < ym < yt
           x0 is on BT
           x1 is on BM until y > ym, then x1 is on MT
       
        2. yb = ym          /\
	   x0 is on BT     /  \
	   x1 is on MT    /____\

        3. yt = ym        ______
	   x0 is on BT    \    /
	   x1 is on BM     \  /
                            \/


05.18.2016

Objects behind objects

Z Buffering

    Keep track of z values in a separate array (z buffer)

    When plotting a pixel,
    check if its z value is greater than the current z buffer value for it

    Calculate z values for each pixel

    Initialize z buffer with smallest possible value/integer

    z is always a double

    plot(x,y,screen,color) --> plot(x,y,z,screen,color,zbuffer)
    draw_line
    scanline_convert


05.23.2016

Matching real lighting

2 distinct properties
    1. Reflective properties of the object
    2. Properties of the light source - color and intensity

Lighting equation

    We need to determine a color value for each polygon

    For grayscale images we can calculate the color once per polygon
    and use that value for red, green, and blue

    For color images, we need to calculate color values separately

    I (illumination)

    I = Iambient + Idiffuse + Ispecular
    
Two kinds of light sources

    Ambient light hits all objects with the same color and intensity

    Point light sources come from a specific location, and do not hit evenly

    Ambient light
        Combination of the color of the ambient light and how much is reflected

    Diffuse reflection
    	Takes light from a single source and reflects it evenly
	in all directions
    
    Specular reflection
    	Reflects point sources at a specific vector


05.24.2016

Reflective Properties

    % of light reflected back

    Constants of reflection (one for each R G and B)
        
        Constant of diffuse, specular, ambient

        Ks + Kd + Ka = 1

Quality of Light

    Ambient
        Represented as a color value

    Point Source
        Represented as a color value and a point
    

05.26.2016

Ambient Light

    Ca - ambient light color
    Ka - ambient reflection constant

    Iambient = Ca * Ka

Diffuse Reflection

     L        N
      \       |       /
       \theta |      /
        \     |     /
	 \    |    /
	  \   |   /
	   \  |  /
	    \ | /
         ____\|/____

    shiny - smooth

    calculate vector from surface to source

    Cp - color of the point light source
    Kd - diffuse reflection constant

    L * N = (||L||)(||N||)costheta

    we must normalize N and L into unit vector

    Lhat = L/||L||

    Idiffuse = Cp Kd costheta = Cp Kd Lhat * Nhat

Specular Reflection

    Cp - color of the point light source
    Ks - specular reflection constant
    
    Ispecular = Cp Ks cosalpha


05.27.2016

Specular Reflection

                  S
     L        N -----  R
      \       |       /
       \theta |theta / alpha
        \     |     /     _ V
	 \    |P   /    _/
	  \   |   /   _/
	   \  |  /  _/
	    \ | / _/
         ____\|/_/__

    vector P - projection of Lhat and Nhat

    Nhat(costheta)
    Nhat(Lhat.Nhat)

    R = P + S
    R = P + P - L

    R = 2P - L
    R = 2(Nhat(Lhat.Nhat))-Lhat

    cosalpha = R.V
    cosalpha = 2[Nhat(Lhat.Nhat)-Lhat].V

    sometimes cosalpha is raised to a power
    higher powers makes it die off quickly

    put a 0 for a negative value

Shading Models

    Flat Shading
        calculate I once per polygon

    Garaud Shading
    	Smoother transitions between polygons
        Calculate I for each pixel
	Generate I for each vertex (vertex normal)
	Interpolate I for each pixel

        Vertex Normal
	    Combination of all the surface normals of every
	    polygon that shares that vertex
             ____________
            |\         _/|  X = NA + NB + NC
	    | \  A   _/  | 
  	    |  \   _/    |  Bigger regions have bigger magnitudes
	    | B \_/      |
	    |  _/X   C   |
	    |_/__________|

    Phong Shading
        Use vertex normals
	Interpolate normal for each pixel
	Recalculate I for each pixel


05.31.2016

